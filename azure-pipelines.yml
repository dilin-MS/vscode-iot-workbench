# Azure Pipeline yaml file for production
trigger:
  branches:
    include:
    - master
    - develop
  tags:
    include:
    - v*

jobs:
- job: Windows

  pool:
    name: Hosted VS2017
    demands: npm

  steps:
  - task: Npm@1
    displayName: 'Install dependencies'
    inputs:
      verbose: false
  - task: Npm@1
    displayName: 'Compile sources'
    inputs:
      command: custom
      verbose: false
      customCommand: 'run compile'
  - script: npm install -g vsce
    displayName: 'install vsce'
  - script: gts check
    displayName: 'check gts error'
    failOnStderr: True
  - script: node scripts/updateConfigIfProduction.js
    displayName: 'Update configuration for production'
  - script: vsce package
    displayName: 'Build VSIX package'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: |
        **\*.vsix
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'  
      artifactName: workbench-windows-drop

- job: macOS
  pool:
    name: Hosted macOS
    demands: npm
  steps:
  - task: UseNode@1
    displayName: 'Install node version >=12.0.0'
    inputs:
      version: '>=12.0.0'
  - task: Npm@1
    displayName: 'Install dependencies'
    inputs:
      verbose: false
  - task: Npm@1
    displayName: 'Compile sources'
    inputs:
      command: custom
      verbose: false
      customCommand: 'run compile'
  - script: sudo npm install -g vsce
    displayName: 'install vsce'
  - script: node node_modules/gts/build/src/cli.js check
    displayName: 'check gts error'
    failOnStderr: True
  - script: node scripts/updateConfigIfProduction.js
    displayName: 'Update configuration for production'
  - script: vsce package
    displayName: 'Build VSIX package'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: |
        **/*.vsix
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'  
      artifactName: workbench-macos-drop

- job: Linux

  pool:
    name: Hosted Ubuntu 1604
    demands: npm

  steps:
  - task: Npm@1
    displayName: 'Install dependencies'
    inputs:
      verbose: false
  - task: Npm@1
    displayName: 'Compile sources'
    inputs:
      command: custom
      verbose: false
      customCommand: 'run compile'
  - script: sudo npm install -g vsce
    displayName: 'install vsce'
  - script: node node_modules/gts/build/src/cli.js check
    displayName: 'check gts error'
    failOnStderr: True

  - bash: |
      is_prod_tag=^refs\/tags\/v?[0-9]+\.[0-9]+\.[0-9]+$
      is_test_tag=^refs\/tags\/v?[0-9]+\.[0-9]+\.[0-9]+-[rR][cC]

      echo "BUILD_SOURCEBRANCH: $BUILD_SOURCEBRANCH"

      [[ $BUILD_SOURCEBRANCH =~ $is_prod_tag ]] && is_prod=true && marketplace_token=$DILIN_MARKETPLACE_TOKEN
      [[ $BUILD_SOURCEBRANCH =~ $is_test_tag ]] && is_test=true && marketplace_token=$DILIN_TEST_MARKETPLACE_TOKEN
      if [[ "$BUILD_REASON" == "Schedule" ]]; then is_nightly_build=true && marketplace_token=$DILIN_TEST_MARKETPLACE_TOKEN; fi
      if [[ "$is_prod" == "true" || "$is_test" == "true" ]]; then deploy_to_github_release=true; fi
      if [[ "$is_prod" == "true" || "$is_test" == "true" || "$is_nightly_build" == "true" ]]; then deploy_to_marketplace=true; fi

      echo "is_prod: $is_prod"
      echo "is_test: $is_test"
      echo "deploy_to_github_release: $deploy_to_github_release"
      echo "deploy_to_marketplace: $deploy_to_marketplace"
      echo "is_nightly_build: $is_nightly_build"
      echo "DILIN_MARKETPLACE_TOKEN: $DILIN_MARKETPLACE_TOKEN"
      echo "DILIN_TEST_MARKETPLACE_TOKEN: $DILIN_TEST_MARKETPLACE_TOKEN"
      echo "marketplace_token: $marketplace_token"
      echo "##########"

      # Set job variable
      echo "##vso[task.setvariable variable=is_prod]$is_prod"
      echo "##vso[task.setvariable variable=is_test]$is_test"
      echo "##vso[task.setvariable variable=deploy_to_github_release]$deploy_to_github_release"
      echo "##vso[task.setvariable variable=deploy_to_marketplace]$deploy_to_marketplace"
      echo "##vso[task.setvariable variable=is_nightly_build]$is_nightly_build"

  - script: node scripts/updateConfig.js
    displayName: 'Update configuration'
  - script: vsce package
    displayName: 'Build VSIX package'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: |
        **/*.vsix
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: workbench-ubuntu-1604-drop

  # # Deploy prod or rc to Github Release
  # - task: GitHubRelease@0
  #   inputs:
  #     gitHubConnection: 'dilin-ms-test'
  #     repositoryName: '$(Build.Repository.Name)'
  #     isPreRelease: eq(variables['is_test'], true)
  #   condition: and(succeeded(), eq(variables['deploy_to_github_release'], 'true'))
  
  # Deploy prod or rc to Github Release
  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'PAT for dilin github repo deployment'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'gitTag'
      tagPattern: 'v?[0-9]+\.[0-9]+\.[0-9]+'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
      isPreRelease: eq(variables['is_test'], true)
    condition: and(succeeded(), eq(variables['deploy_to_github_release'], 'true'))

  # Deploy to marketplace
  - bash: vsce publish -p $MARKETPLACE_TOKEN --packagePath *.vsix
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: 'Deploy to marketplace'
    env:
      MARKETPLACE_TOKEN: $(marketplace_token)
    condition: and(succeeded(), eq(variables['deploy_to_marketplace'], 'true'))