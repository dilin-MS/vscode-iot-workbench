# Azure Pipeline yaml file for production
trigger:
  branches:
    include:
    - master
    - develop
  tags:
    include:
    - v*

jobs:
# - job: Windows

#   pool:
#     name: Hosted VS2017
#     demands: npm

#   steps:
#   - task: Npm@1
#     displayName: 'Install dependencies'
#     inputs:
#       verbose: false
#   - task: Npm@1
#     displayName: 'Compile sources'
#     inputs:
#       command: custom
#       verbose: false
#       customCommand: 'run compile'
#   - script: npm install -g vsce
#     displayName: 'install vsce'
#   - script: gts check
#     displayName: 'check gts error'
#     failOnStderr: True
#   - script: node scripts/updateConfigIfProduction.js
#     displayName: 'Update configuration for production'
#   - script: vsce package
#     displayName: 'Build VSIX package'
#   - task: CopyFiles@2
#     inputs:
#       SourceFolder: '$(System.DefaultWorkingDirectory)'
#       Contents: |
#         **\*.vsix
#       TargetFolder: '$(Build.ArtifactStagingDirectory)'
#   - task: PublishBuildArtifacts@1
#     inputs:
#       pathtoPublish: '$(Build.ArtifactStagingDirectory)'  
#       artifactName: workbench-windows-drop

# - job: macOS
  # pool:
  #   name: Hosted macOS
  #   demands: npm
  # steps:
  # - task: UseNode@1
  #   displayName: 'Install node version >=12.0.0'
  #   inputs:
  #     version: '>=12.0.0'
  # - task: Npm@1
  #   displayName: 'Install dependencies'
  #   inputs:
  #     verbose: false
  # - task: Npm@1
  #   displayName: 'Compile sources'
  #   inputs:
  #     command: custom
  #     verbose: false
  #     customCommand: 'run compile'
  # - script: sudo npm install -g vsce
  #   displayName: 'install vsce'
  # - script: node node_modules/gts/build/src/cli.js check
  #   displayName: 'check gts error'
  #   failOnStderr: True
  # - script: node scripts/updateConfigIfProduction.js
  #   displayName: 'Update configuration for production'
  # - script: vsce package
  #   displayName: 'Build VSIX package'
  # - task: CopyFiles@2
  #   inputs:
  #     SourceFolder: '$(System.DefaultWorkingDirectory)'
  #     Contents: |
  #       **/*.vsix
  #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     pathtoPublish: '$(Build.ArtifactStagingDirectory)'  
  #     artifactName: workbench-macos-drop

- job: Linux

  pool:
    name: Hosted Ubuntu 1604
    demands: npm

  steps:
  - task: Npm@1
    displayName: 'Install dependencies'
    inputs:
      verbose: false
  - task: Npm@1
    displayName: 'Compile sources'
    inputs:
      command: custom
      verbose: false
      customCommand: 'run compile'
  - script: sudo npm install -g vsce
    displayName: 'install vsce'
  - script: node node_modules/gts/build/src/cli.js check
    displayName: 'check gts error'
    failOnStderr: True

  - bash: |
      is_prod_tag=^refs\/tags\/v?[0-9]+\.[0-9]+\.[0-9]+$
      is_test_tag=^refs\/tags\/v?[0-9]+\.[0-9]+\.[0-9]+-[rR][cC]
      echo "is_prod_tag: $is_prod_tag"
      echo "is_test_tag: $is_test_tag"
      echo "##########"

      echo "BUILD_SOURCEBRANCH: $BUILD_SOURCEBRANCH"
      [[ $BUILD_SOURCEBRANCH =~ $is_prod_tag ]] && is_prod=true && marketplace_token=$DILIN_MARKETPLACE_TOKEN
      [[ $BUILD_SOURCEBRANCH =~ $is_test_tag ]] && is_test=true && marketplace_token=$DILIN_TEST_MARKETPLACE_TOKEN
      $is_prod || $is_test && is_tag=true
      echo "is_prod: $is_prod"
      echo "is_test: $is_test"
      echo "is_tag: $is_tag"
      echo "marketplace_token: $marketplace_token"
      echo "##########"

      # Set job variable
      echo "##vso[task.setvariable variable=is_prod]$is_prod"
      echo "##vso[task.setvariable variable=is_test]$is_test"

      # Update token

  - bash: echo $(is_prod)
  - bash: echo $(is_test)
  - script: node scripts/test.js
    displayName: 'Test variable in script file'      
  - script: node scripts/test.js
    displayName: 'Update configuration for production'
  - script: vsce package
    displayName: 'Build VSIX package'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: |
        **/*.vsix
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: workbench-ubuntu-1604-drop
  # Deploy to Github Release
  - task: GitHubRelease@0
    condition: and(succeeded(), eq(variables['is_tag'], 'true'))
    inputs:
      gitHubConnection: 'dilin-ms-test'
      repositoryName: '$(Build.Repository.Name)'
      isPreRelease: eq($(is_test), true)
  # Deploy to production marketplace
  - bash: vsce publish -p $MARKETPLACE_TOKEN --packagePath *.vsix
    workingDirectory: '$(Build.ArtifactStagingDirectory)/workbench-ubuntu-1604-drop'
    displayName: 'Deploy to production marketplace'
    env:
      MARKETPLACE_TOKEN: $(marketplace_token)
    condition: and(succeeded(), eq(variables['is_tag'], 'true'))